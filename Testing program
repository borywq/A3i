#include <iostream>
#include <vector>
#include <cmath>
#include <chrono>
#include <cstdint>
#include <algorithm>
#include <random>

using namespace std;

void print(vector<int>& v) {
  cout << "\n";
  for (int i = 0; i < v.size(); ++i) {
    cout << v[i] << ',';
  }
  cout << "\n";
}

void heapify(vector<int>& A, int i, int l, int r) {
  while (2 * i + 1 - l < r) {
    int left = 2 * i + 1 - l;
    int right = 2 * i + 2 - l;
    int j = left;
    if (right < r && A[right] > A[left]) {
      j = right;
    }
    if (A[i] > A[j]) {
      break;
    }
    swap(A[i], A[j]);
    i = j;
  }
}

void buildMaxHeap(vector<int>& A, int l, int r) {
  int n = r - l;
  for (int i = n / 2; i >= 0; --i) {
    heapify(A, l + i, l, r);
  }
}

void heapSort(vector<int>& A, int l ,int r) {
  buildMaxHeap(A, l, r);
  for (int last = r - 1; last >= l; --last) {
    swap(A[l], A[last]);
    heapify(A, l, l, last);
  }
}

void insertion(vector<int>& A, int l, int r) {
  for (int i = l + 1; i < r; ++i) {
    int val = A[i];
    int j = i - 1;
    while (A[j] > val && j >= l) {
      A[j + 1] = A[j];
      --j;
    }
    A[j + 1] = val;
  }
}

int partition(vector<int>& A, int l, int r) {
  if (l >= r - 1) {
    return l;
  }
  int ind = (rand() % (r - l)) + l;
  swap(A[ind], A[r - 1]);
  int i = l;
  for (int j = l; j < r - 1; ++j) {
    if (A[j] < A[r - 1]) {
      swap(A[i], A[j]);
      ++i;
    }
  }
  swap(A[i], A[r - 1]);
  return i;
}

void introSort(vector<int>& A, int l ,int r, int depth) {
  if (r - l < 16) {
    insertion(A, l, r);
  } else if (depth >= A.size() * A.size()) {
    heapSort(A, l, r);
  } else {
    int i = partition(A, l, r);
    introSort(A, l, i, 2 * depth);
    introSort(A, i + 1, r, 2 * depth);
  }
}


void quickSort(vector<int>& A, int l ,int r) {
  if (l >= r - 1) {
    return;
  }
  int i = partition(A, l, r);
  quickSort(A, l, i);
  quickSort(A, i + 1, r);
}

class ArrayGenerator {
 public:
  static std::vector<int> rnd(int size) {
    std::vector<int> arr(size);
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 6000);

    for (int i = 0; i < size; ++i) {
      arr[i] = dis(gen);
    }

    return arr;
  }

  static vector<int> desc(int size) {
    vector<int> arr = rnd(size);
    sort(arr.begin(), arr.end(), greater<>());
    return arr;
  }

  static std::vector<int> near(int size) {
    std::vector<int> arr = rnd(size);
    sort(arr.begin(), arr.end());
    int inv = min(rand() % 5, size);
    for (int i = 0; i < inv; ++i) {
      swap(arr[rand() % size], arr[rand() % size]);
    }
    return arr;
  }
};

class SortTester {
 public:
  static long long testQuickSort(std::vector<int>& A) {
    auto start = std::chrono::high_resolution_clock::now();
    quickSort(A, 0, A.size());
    auto end = std::chrono::high_resolution_clock::now() - start;
    return std::chrono::duration_cast<std::chrono::microseconds>(end).count();
  }

  static long long testIntroSort(std::vector<int>& A) {
    auto start = std::chrono::high_resolution_clock::now();
    introSort(A, 0, A.size(), 1);
    auto end = std::chrono::high_resolution_clock::now();
    return std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();
  }
};


int main() {
  ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  vector<int> test1 = ArrayGenerator::rnd(10000);
  vector<int> test2 = ArrayGenerator::desc(10000);
  vector<int> test3 = ArrayGenerator::near(10000);

  for (int i = 500; i <= 10000; i += 100) {
    int d = rand() % (10000 - i - 1);
    vector<int> v1(i);
    vector<int> v2(i);
    vector<int> u1(i);
    vector<int> u2(i);
    vector<int> z1(i);
    vector<int> z2(i);
    copy(test1.begin() + d, test1.begin() + d + i, v1.begin());
    copy(test1.begin() + d, test1.begin() + d + i, v2.begin());
    copy(test2.begin() + d, test2.begin() + d + i, u1.begin());
    copy(test2.begin() + d, test2.begin() + d + i, u2.begin());
    copy(test3.begin() + d, test3.begin() + d + i, z1.begin());
    copy(test3.begin() + d, test3.begin() + d + i, z2.begin());

    cout << "\nSize: " << i << "\n\tRandom array" << "\n\t\tQuickSort: " <<
      SortTester::testQuickSort(v1) << "\n\t\tIntroSort: " << SortTester::testIntroSort(v2);
    cout << "\n\tDescending array" << "\n\t\tQuickSort: " <<
      SortTester::testQuickSort(u1) << "\n\t\tIntroSort: " << SortTester::testIntroSort(u2);
    cout << "\n\tNearly sorted array" << "\n\t\tQuickSort: " <<
      SortTester::testQuickSort(z1)<< "\n\t\tIntroSort: " << SortTester::testIntroSort(z2);
  }
}

